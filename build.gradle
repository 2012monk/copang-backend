plugins {
    id 'org.springframework.boot' version '2.5.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id 'java'
}

group = 'com.alconn'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

 configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExtensions
}

 repositories {
    mavenCentral()
}

jar.enabled=false

ext {
//    set('snippetsDir', file("build/generated-snippets"))
    snippetsDir = file('build/generated-snippets')

    set('springCloudVersion', "2020.0.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    implementation 'org.springframework.cloud:spring-cloud-starter'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    compileOnly 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2',
            // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
            //'org.bouncycastle:bcprov-jdk15on:1.60',
            'io.jsonwebtoken:jjwt-jackson:0.11.2' // or 'io.jsonwebtoken:jjwt-gson:0.11.2' for gson

    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-apt'
    // ====================== 새로운 설정 ===========================
//    compileOnly "com.querydsl:querydsl-core" // querydsl
//    compileOnly "com.querydsl:querydsl-jpa" // querydsl
//    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
//    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
//    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    // ====================== 새로운 설정 ===========================


    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'


    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.1.Final'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    implementation 'org.mapstruct:mapstruct:1.4.1.Final'

    annotationProcessor 'org.projectlombok:lombok'

    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'

    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

}

def querydslSrcDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

sourceSets {
    main.java.srcDirs querydslSrcDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

// ====================== 새로운 설정 ===========================
//def generated='src/main/generated'
//sourceSets {
//    main.java.srcDirs += [ generated ]
//}
//
//tasks.withType(JavaCompile) {
//    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
//}
//
//clean.doLast {
//    file(generated).deleteDir()
//}
// ====================== 새로운 설정 ===========================


project.afterEvaluate {
    project.tasks.compileQuerydsl.options.compilerArgs = [
            "-proc:only",
            "-processor", project.querydsl.processors() +
                    ',lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
    ]
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}


asciidoctor {
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir
    dependsOn test
}



bootJar {
    dependsOn asciidoctor // (3)
//    copy {
//        from "build/docs/asciidoc"            // /html5를 사용하지 않는다!
//        into 'src/main/resources/static/docs'    // /static/docs로 복사!
//    }
    from ("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/docs/asciidoc/")
    into file("src/main/resources/static/docs")
}


build {
    dependsOn copyDocument
}